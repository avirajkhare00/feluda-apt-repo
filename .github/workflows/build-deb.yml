name: Build and Publish DEB Package

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Feluda version to build (e.g., 1.9.8)'
        required: true
        default: 'latest'
  repository_dispatch:
    types: [feluda-release]

permissions:
  contents: write
  packages: write

jobs:
  build-deb:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout APT repository
        uses: actions/checkout@v4
        with:
          path: apt-repo

      - name: Checkout Feluda source
        uses: actions/checkout@v4
        with:
          repository: avirajkhare00/feluda
          path: feluda-source

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Build Feluda
        run: |
          cd feluda-source
          cargo build --release
          ls -la target/release/feluda

      - name: Install reprepro
        run: |
          sudo apt-get update
          sudo apt-get install -y reprepro

      - name: Setup GPG
        run: |
          if [ -n "${{ secrets.GPG_PRIVATE_KEY }}" ]; then
            echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --import
            if [ -n "${{ secrets.GPG_PASSPHRASE }}" ]; then
              echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --export-secret-key > private.key
              gpg --import private.key
            fi
            echo "‚úÖ GPG key imported successfully"
            gpg --list-keys
          else
            echo "‚ö†Ô∏è No GPG_PRIVATE_KEY secret found - repository will not be signed"
            echo "Creating unsigned repository..."
          fi

      - name: Create DEB package
        run: |
          cd apt-repo

          # Create package structure
          mkdir -p feluda_${{ github.event.inputs.version || '1.9.8' }}_amd64/DEBIAN
          mkdir -p feluda_${{ github.event.inputs.version || '1.9.8' }}_amd64/usr/local/bin

          # Copy binary
          cp ../feluda-source/target/release/feluda feluda_${{ github.event.inputs.version || '1.9.8' }}_amd64/usr/local/bin/
          chmod +x feluda_${{ github.event.inputs.version || '1.9.8' }}_amd64/usr/local/bin/feluda

          # Create control file
          cat > feluda_${{ github.event.inputs.version || '1.9.8' }}_amd64/DEBIAN/control << EOF
          Package: feluda
          Version: ${{ github.event.inputs.version || '1.9.8' }}
          Section: utils
          Priority: optional
          Architecture: amd64
          Depends: libc6
          Maintainer: Feluda Team <feluda@example.com>
          Description: A CLI tool to check dependency licenses
           Feluda analyzes project dependencies, notes their licenses,
           and flags any permissions that restrict personal or commercial usage
           or are incompatible with your project's license.
          EOF

          # Build DEB package
          dpkg-deb --build feluda_${{ github.event.inputs.version || '1.9.8' }}_amd64

          # Move to incoming directory
          mv feluda_${{ github.event.inputs.version || '1.9.8' }}_amd64.deb incoming/

      - name: Update APT repository
        run: |
          cd apt-repo
          echo "üîç Checking GPG setup..."
          gpg --list-keys || echo "No GPG keys found"

          if [ -n "${{ secrets.GPG_PRIVATE_KEY }}" ]; then
            echo "üîê Building signed repository..."
            reprepro -V --section utils --component main --priority optional includedeb bionic incoming/feluda_${{ github.event.inputs.version || '1.9.8' }}_amd64.deb
          else
            echo "‚ö†Ô∏è Building unsigned repository..."
            reprepro -V --section utils --component main --priority optional --nosign includedeb bionic incoming/feluda_${{ github.event.inputs.version || '1.9.8' }}_amd64.deb
          fi

          echo "üìÅ Repository structure after build:"
          find . -name "*.gpg" -o -name "Release*" | head -10

      - name: Commit and push changes
        run: |
          cd apt-repo
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Add Feluda v${{ github.event.inputs.version || '1.9.8' }} DEB package"
          git remote set-url origin https://x-access-token:${{ secrets.REPO_ACCESS_TOKEN }}@github.com/${{ github.repository }}
          git push origin main
          
      - name: Trigger GitHub Pages deployment
        run: |
          echo "‚úÖ APT repository updated. GitHub Pages will be deployed automatically."
